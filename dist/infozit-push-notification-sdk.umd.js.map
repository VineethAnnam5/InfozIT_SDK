{"version":3,"file":"infozit-push-notification-sdk.umd.js","sources":["../src/utils/base64.js","../src/utils/push.js","../src/index.js"],"sourcesContent":["// push-notification-sdk/src/utils/base64.js\r\n\r\n/**\r\n * Converts a URL-safe Base64 string to a Uint8Array.\r\n * Used for converting VAPID public keys.\r\n * @param {string} base64String - The Base64 URL-safe string.\r\n * @returns {Uint8Array} The converted Uint8Array.\r\n */\r\nexport function urlB64ToUint8Array(base64String) {\r\n  const padding = '='.repeat((4 - base64String.length % 4) % 4);\r\n  const base64 = (base64String + padding)\r\n    .replace(/\\-/g, '+') // Replace - with +\r\n    .replace(/_/g, '/'); // Replace _ with /\r\n\r\n  const rawData = window.atob(base64); // Decode Base64 string\r\n  const outputArray = new Uint8Array(rawData.length);\r\n\r\n  // Populate Uint8Array with character codes\r\n  for (let i = 0; i < rawData.length; ++i) {\r\n    outputArray[i] = rawData.charCodeAt(i);\r\n  }\r\n  return outputArray;\r\n}","// push-notification-sdk/src/utils/push.js\r\n\r\nimport { urlB64ToUint8Array } from './base64';\r\n\r\n/**\r\n * Subscribes the user to push notifications and sends the subscription to the backend.\r\n * @param {object} config - Configuration object from SDK init.\r\n * @param {ServiceWorkerRegistration} registration - The active service worker registration.\r\n */\r\nexport async function subscribeUser(config, registration) {\r\n  // Ensure required config for subscription is present\r\n  if (!config.applicationServerKey) {\r\n    console.error('[PushSDK][subscribeUser] Missing applicationServerKey in config.');\r\n    throw new Error('Application Server Key is required for subscription.');\r\n  }\r\n  if (!config.backendUrl) {\r\n      console.error('[PushSDK][subscribeUser] Missing backendUrl in config. Subscription will not be saved.');\r\n      throw new Error('Backend URL is required to save subscription.');\r\n  }\r\n\r\n  try {\r\n    let subscription = await registration.pushManager.getSubscription();\r\n\r\n    if (subscription) {\r\n      console.log('[PushSDK][subscribeUser] Existing push subscription found:', subscription);\r\n      // Optional: Check if subscription needs to be re-sent (e.g., if userId changed)\r\n      // For simplicity, we'll re-send if found, ensuring backend is always up-to-date.\r\n      await sendSubscriptionToBackend(subscription, config.backendUrl, config.apiKey, config.userId);\r\n      await sendWelcomeNotification(registration, config.welcomeIconPath);\r\n      return subscription;\r\n    }\r\n\r\n    console.log('[PushSDK][subscribeUser] No existing subscription. Creating new subscription...');\r\n    const subscribeOptions = {\r\n      userVisibleOnly: true,\r\n      applicationServerKey: urlB64ToUint8Array(config.applicationServerKey),\r\n    };\r\n\r\n    subscription = await registration.pushManager.subscribe(subscribeOptions);\r\n    console.log('[PushSDK][subscribeUser] New push subscription created:', subscription);\r\n\r\n    await sendSubscriptionToBackend(subscription, config.backendUrl, config.apiKey, config.userId);\r\n    await sendWelcomeNotification(registration, config.welcomeIconPath);\r\n\r\n    return subscription;\r\n\r\n  } catch (error) {\r\n    if (error.name === 'NotAllowedError') {\r\n      console.warn('[PushSDK][subscribeUser] Permission denied by user or browser policy.');\r\n      throw new Error('Notification permission denied.');\r\n    } else if (error.name === 'AbortError') {\r\n      console.warn('[PushSDK][subscribeUser] Subscription process aborted (e.g., user closed prompt).');\r\n      throw new Error('Subscription aborted.');\r\n    } else {\r\n      console.error('[PushSDK][subscribeUser] An unexpected error occurred during subscription:', error);\r\n      throw error; // Re-throw to propagate\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Sends the PushSubscription object to your backend server.\r\n * @param {PushSubscription} subscription - The PushSubscription object.\r\n * @param {string} backendUrl - The URL of your backend endpoint to save subscriptions.\r\n * @param {string} [apiKey] - Optional API key for backend authentication.\r\n * @param {string} [userId] - Optional user ID to associate with the subscription.\r\n * @returns {Promise<any>} - The response data from the backend.\r\n */\r\nexport async function sendSubscriptionToBackend(subscription, backendUrl, apiKey, userId) {\r\n  const dataToSend = {\r\n    endpoint: subscription.endpoint,\r\n    expirationTime: subscription.expirationTime,\r\n    keys: subscription.toJSON().keys, // This includes p256dh and auth keys\r\n    hostname: window.location.origin,\r\n    userId: userId, // Pass userId from config\r\n    // apiKey: apiKey // Include API Key in body if backend expects it this way\r\n  };\r\n\r\n  try {\r\n    console.log('[PushSDK][sendSubscriptionToBackend] Sending data:', dataToSend);\r\n    const headers = {\r\n      'Content-Type': 'application/json',\r\n    };\r\n    if (apiKey) {\r\n      // Example: Add an Authorization header if your backend requires it\r\n      // Adjust 'Bearer' token format as per your backend's authentication scheme\r\n      headers['Authorization'] = `Bearer ${apiKey}`;\r\n    }\r\n\r\n    const response = await fetch(backendUrl, {\r\n      method: 'POST',\r\n      headers: headers,\r\n      body: JSON.stringify(dataToSend),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorDetail = await response.text(); // Get more detail from response\r\n      throw new Error(`Backend responded with status: ${response.status} - ${errorDetail}`);\r\n    }\r\n\r\n    const responseData = await response.json();\r\n    console.log('[PushSDK][sendSubscriptionToBackend] Subscription saved successfully:', responseData);\r\n    return responseData;\r\n  } catch (error) {\r\n    console.error('[PushSDK][sendSubscriptionToBackend] Error sending subscription to backend:', error);\r\n    throw error; // Re-throw to propagate the error\r\n  }\r\n}\r\n\r\n/**\r\n * Shows a welcome notification to the user.\r\n * @param {ServiceWorkerRegistration} registration - The active service worker registration.\r\n * @param {string} welcomeIconPath - Path to the icon for the welcome notification.\r\n */\r\nexport async function sendWelcomeNotification(registration, welcomeIconPath) {\r\n  if (registration && 'Notification' in window) {\r\n    try {\r\n      await registration.showNotification('You’re All Set for Instant Alerts', {\r\n        body: 'Thanks for enabling notifications. We\\'ll keep you updated!We’ll keep you in the loop with updates, offers, and helpful tips — right when you need them.',\r\n        icon: welcomeIconPath || '/welcome-icon.png', // Fallback to a common path\r\n        tag: 'welcome-notification' // Use a tag to prevent multiple welcome notifications\r\n      });\r\n      console.log('[PushSDK][sendWelcomeNotification] Welcome notification shown.');\r\n    } catch (error) {\r\n      console.error('[PushSDK][sendWelcomeNotification] Failed to show welcome notification:', error);\r\n    }\r\n  } else {\r\n    console.warn('[PushSDK][sendWelcomeNotification] Cannot show welcome notification: Service Worker or Notification API not available.');\r\n  }\r\n}","// push-notification-sdk/src/index.js\r\n\r\nimport { subscribeUser } from './utils/push'; // Import push-related utilities\r\n\r\n/**\r\n * Initializes the InfozIT Push Notification SDK.\r\n * This function handles service worker registration, notification permission requests,\r\n * and push subscription management.\r\n *\r\n * @param {object} config - Configuration object for the SDK.\r\n * @param {string} config.serviceWorkerUrl - The relative or absolute URL to the `service-worker.js` file.\r\n * (e.g., '/service-worker.js' if copied to app's public folder)\r\n * @param {string} config.backendUrl - The URL of your backend endpoint where push subscriptions will be saved.\r\n * (e.g., 'https://your-api.com/api/pushtokens/subscribe')\r\n * @param {string} config.applicationServerKey - Your VAPID public key, as a Base64 URL-safe string.\r\n * @param {string} [config.apiKey] - Optional: Your API key for authentication with your backend.\r\n * @param {string} [config.userId] - Optional: A unique identifier for the current user.\r\n * @param {string} [config.welcomeIconPath='/welcome-icon.png'] - Optional: Path to the icon for the welcome notification.\r\n */\r\nexport async function init(config) {\r\n  console.log('[PushSDK] InfozIT SDK Initialization Started.', config);\r\n\r\n  // --- Input Validation ---\r\n  if (!config || !config.serviceWorkerUrl || !config.backendUrl || !config.applicationServerKey) {\r\n    console.error('[PushSDK] Initialization failed: Missing required configuration parameters. ' +\r\n                  'Ensure serviceWorkerUrl, backendUrl, and applicationServerKey are provided.');\r\n    return;\r\n  }\r\n\r\n  // --- Browser Compatibility Checks ---\r\n  if (!('serviceWorker' in navigator)) {\r\n    console.warn('[PushSDK] Service Workers are not supported in this browser. Push notifications will not work.');\r\n    return;\r\n  }\r\n  if (!('PushManager' in window)) {\r\n    console.warn('[PushSDK] Push API is not supported in this browser. Push notifications will not work.');\r\n    return;\r\n  }\r\n  if (!('Notification' in window)) {\r\n    console.warn('[PushSDK] Notification API is not supported in this browser. Push notifications will not work.');\r\n    return;\r\n  }\r\n\r\n  try {\r\n    // 1. Register the Service Worker\r\n    console.log(`[PushSDK] Registering service worker from: ${config.serviceWorkerUrl}`);\r\n    const registration = await navigator.serviceWorker.register(config.serviceWorkerUrl, { scope: '/' });\r\n    console.log('[PushSDK] Service Worker registration successful:', registration);\r\n\r\n    // 2. Request Notification Permission\r\n    // This will prompt the user if permission is 'default' or has never been requested.\r\n    // If 'granted' or 'denied', it will resolve immediately with that status.\r\n    console.log('[PushSDK] Requesting notification permission...');\r\n    const permission = await Notification.requestPermission();\r\n    console.log('[PushSDK] Notification permission status:', permission);\r\n\r\n    if (permission === 'granted') {\r\n      // 3. Subscribe the User to Push Notifications (or get existing subscription)\r\n      console.log('[PushSDK] Permission granted. Attempting to subscribe user...');\r\n      await subscribeUser(config, registration); // Pass config and registration to subscribeUser\r\n\r\n      console.log('[PushSDK] InfozIT SDK Initialization Completed Successfully.');\r\n    } else if (permission === 'denied') {\r\n      console.warn('[PushSDK] Notification permission explicitly denied by user. Cannot subscribe.');\r\n      // Optionally send an event to your analytics that permission was denied\r\n    } else { // 'default' or unrecognized\r\n      console.warn('[PushSDK] Notification permission not granted. User did not allow or dismissed the prompt.');\r\n    }\r\n\r\n  } catch (error) {\r\n    // Centralized error handling for the init process\r\n    if (error.name === 'NotAllowedError' || error.message === 'Notification permission denied.') {\r\n      console.error('[PushSDK] Initialization Error: User blocked notifications.', error);\r\n    } else if (error.name === 'AbortError' || error.message === 'Subscription aborted.') {\r\n      console.warn('[PushSDK] Initialization Warning: Subscription process was cancelled.', error);\r\n    } else {\r\n      console.error('[PushSDK] An unexpected error occurred during SDK initialization:', error);\r\n    }\r\n  }\r\n}"],"names":[],"mappings":"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"}